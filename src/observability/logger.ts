import { Logger as AzureLogger } from '@dvsa/azure-logger';
import config from '../config';

export class Logger extends AzureLogger {
  constructor() {
    super('FTTS', config.appName);
  }
}

export enum BusinessTelemetryEvent {
  RES_DVA_TRANSFER_ERROR = 'RES_DVA_TRANSFER_ERROR',
  RES_DVA_FILE_FETCH_ERROR = 'RES_DVA_FILE_FETCH_ERROR',
  RES_DVA_AUTH_ERROR = 'RES_DVA_AUTH_ERROR',
  RES_DVA_FILE_GENERATION_ERROR = 'RES_DVA_FILE_GENERATION_ERROR',
  RES_DVA_ROW_PROCESSING_ERROR = 'RES_DVA_ROW_PROCESSING_ERROR',
  RES_DVA_METADATA_FETCH_ERROR = 'RES_DVA_METADATA_FETCH_ERROR',
  RES_DVA_METADATA_STORE_ERROR = 'RES_DVA_METADATA_STORE_ERROR',
  RES_DVA_CDS_BAD_REQUEST = 'RES_DVA_CDS_BAD_REQUEST',
  RES_DVA_CDS_CONNECTIVITY_ISSUE = 'RES_DVA_CDS_CONNECTIVITY_ISSUE',
  RES_DVA_CDS_NOT_FOUND = 'RES_DVA_CDS_NOT_FOUND',
  RES_DVA_CORRESPONDING_TEST_NOT_FOUND_ERROR = 'RES_DVA_CORRESPONDING_TEST_NOT_FOUND_ERROR',
  RES_DVA_CDS_INTERNAL_ERROR = 'RES_DVA_CDS_INTERNAL_ERROR',
  RES_DVA_LEARNER_FILE_UPLOAD_SUCCESSFUL = 'RES_DVA_LEARNER_FILE_UPLOAD_SUCCESSFUL',
  RES_DVA_ADI_FILE_UPLOAD_SUCCESSFUL = 'RES_DVA_ADI_FILE_UPLOAD_SUCCESSFUL',
  RES_DVA_AMI_FILE_UPLOAD_SUCCESSFUL = 'RES_DVA_AMI_FILE_UPLOAD_SUCCESSFUL',
  RES_DVA_SCHEMA_VALIDATION_ERROR = 'RES_DVA_SCHEMA_VALIDATION_ERROR',
  RES_TARS_RESULTS_FILE_FETCH_ERROR = 'RES_TARS_RESULTS_FILE_FETCH_ERROR',
  RES_TARS_RESULTS_FILE_STORE_ERROR = 'RES_TARS_RESULTS_FILE_STORE_ERROR',
  RES_TARS_RESULTS_FILE_GENERATION_ERROR = 'RES_TARS_RESULTS_FILE_GENERATION_ERROR',
  RES_TARS_RESULTS_FILE_UPLOAD_SUCCESSFUL = 'RES_TARS_RESULTS_FILE_UPLOAD_SUCCESSFUL',
  RES_TARS_METADATA_FETCH_ERROR = 'RES_TARS_METADATA_FETCH_ERROR',
  RES_TARS_METADATA_STORE_ERROR = 'RES_TARS_METADATA_STORE_ERROR',
  RES_TARS_NO_METADATA_ERROR = 'RES_TARS_NO_METADATA_ERROR',
  RES_TARS_CDS_BAD_REQUEST = 'RES_TARS_CDS_BAD_REQUEST',
  RES_TARS_CDS_CONNECTIVITY_ISSUE = 'RES_TARS_CDS_CONNECTIVITY_ISSUE',
  RES_TARS_CORRESPONDING_TEST_NOT_FOUND_ERROR = 'RES_TARS_CORRESPONDING_TEST_NOT_FOUND_ERROR',
  RES_TARS_CORRESPONDING_TEST_HISTORY_MISSING_START_TIME_AND_BOOKING_PRODUCT_TESTDATE_ERROR = 'RES_TARS_CORRESPONDING_TEST_HISTORY_MISSING_START_TIME_AND_BOOKING_PRODUCT_TESTDATE_ERROR',
  RES_TARS_CDS_NOT_FOUND = 'RES_TARS_CDS_NOT_FOUND',
  RES_TARS_CDS_INTERNAL_ERROR = 'RES_TARS_CDS_INTERNAL_ERROR',
  RES_TARS_RESULTS_FILES_DELETED = 'RES_TARS_RESULTS_FILES_DELETED',
  RES_TARS_SCHEMA_VALIDATION_ERROR = 'RES_TARS_SCHEMA_VALIDATION_ERROR',
  NOT_WHITELISTED_URL_CALL = 'NOT_WHITELISTED_URL_CALL',
  HEALTH_CHECK_SUCCESS = 'HEALTH_CHECK_SUCCESS',
  HEALTH_CHECK_FAILED = 'HEALTH_CHECK_FAILED',
  RES_DVA_CDS_BAND_SCORE_RETRIEVAL_WARNING = 'RES_DVA_CDS_BAND_SCORE_RETRIEVAL_WARNING',
}

export const logger = new Logger();
